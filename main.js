/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => VaultExpoterPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");

// src/fseditor.ts
var FsEditor = class {
  constructor(plugin) {
    this.plugin = plugin;
    this.fs = require("fs");
    this.path = require("path");
  }
  get root() {
    let a = this.plugin.app.vault.adapter;
    return a.basePath.replace(/\\/g, "/");
  }
  abspath(tfile) {
    if (tfile) {
      return this.root + "/" + tfile.path;
    } else {
      return null;
    }
  }
  isfile(path) {
    return this.fs.existsSync(path) && this.fs.statSync(path).isFile();
  }
  isdir(path) {
    return this.fs.existsSync(path) && this.fs.statSync(path).isDirectory();
  }
  mkdirRecursiveSync(path) {
    if (this.isdir(path)) {
      return true;
    }
    const parent = this.path.dirname(path);
    if (!this.isdir(parent)) {
      this.mkdirRecursiveSync(parent);
    }
    this.fs.mkdirSync(path);
  }
  /**
  * 附件 src 到 dst，不在 vault 中，需要绝对路径
  * overwrite，复盖；mtime，新文件；
  */
  copy_file_by_path(src, dst, mode = "pass>overwrite>mtime") {
    const fs = this.fs;
    mode = mode.split(">")[0];
    if (!fs.existsSync(src)) {
      return;
    }
    if (fs.existsSync(dst)) {
      if (mode === "overwrite") {
        fs.unlinkSync(dst);
        fs.copyFileSync(src, dst);
      } else if (mode === "mtime") {
        if (fs.statSync(dst).mtimeMs < fs.statSync(src).mtimeMs) {
          fs.unlinkSync(dst);
          fs.copyFileSync(src, dst);
        }
      }
    } else {
      fs.copyFileSync(src, dst);
    }
  }
  copy_tfile(tfile, dst, mode = "mtime") {
    if (tfile) {
      let src = this.abspath(tfile);
      src && this.copy_file_by_path(src, dst, mode);
    }
  }
  mirror_tfile(tfile, vault_root, mode = "mtime", attachment = true, outlink = false) {
    if (tfile) {
      vault_root = vault_root.replace(/\\g/, "/");
      let src = this.root + "/" + tfile.path;
      let dst = vault_root + "/" + tfile.path;
      this.mkdirRecursiveSync(this.path.dirname);
      this.copy_file_by_path(src, dst, mode);
      if (attachment) {
        let nc = this.plugin.app.plugins.getPlugin("note-chain");
        let tfiles = nc.chain.get_outlinks(tfile);
        for (let t of tfiles) {
          if (!(t.extension === "md")) {
            this.mirror_tfile(t, vault_root, mode, false);
          } else if (outlink) {
            this.mirror_tfile(t, vault_root, mode, false);
          }
        }
      }
    }
  }
  modify(path, callback, encoding = "utf8") {
    const fs = this.fs;
    if (!fs.existsSync(path)) {
      return;
    }
    ;
    fs.readFile(
      path,
      encoding,
      (err, data) => {
        if (err) {
          console.error("Error reading file:", err);
          ;
        }
        let rs = callback(path, data);
        fs.writeFile(path, rs, encoding, (err2) => {
          if (err2) {
            console.error("Error writing file:", err2);
          } else {
            console.log("File content updated successfully.");
          }
        });
      }
    );
  }
};

// main.ts
var DEFAULT_SETTINGS = {
  nameLocalGitProject: "LocalGitProject",
  readmeRemoveFrontmatter: true,
  assetsLocalGitProject: "assets",
  pluginDirExporter: ""
};
var cmd_export_readme = (plugin) => ({
  id: "export_readme",
  name: "Export readMe",
  callback: async () => {
    const nc = plugin.notechain;
    let tfile = nc.chain.current_note;
    await plugin.export_readme(
      tfile,
      null,
      true,
      plugin.settings.assetsLocalGitProject
    );
  }
});
var cmd_set_git_project = (plugin) => ({
  id: "set_git_project",
  name: "Set Git Project",
  callback: async () => {
    const nc = plugin.notechain;
    let dir = await nc.chain.tp_prompt("\u8F93\u5165\u6587\u4EF6\u5939");
    if (!dir || !plugin.fsEditor.fs.existsSync(dir)) {
      return;
    }
    await nc.editor.set_frontmatter(
      nc.chain.current_note,
      plugin.settings.nameLocalGitProject,
      dir
    );
  }
});
var cmd_export_plugin = (plugin) => ({
  id: "cmd_export_plugin",
  name: "Export Plugin",
  callback: async () => {
    const nc = plugin.notechain;
    let plugins = Object.keys(plugin.app.plugins.plugins);
    let p = await nc.chain.tp_suggester(plugins, plugins);
    let eplugin = plugin.app.plugins.getPlugin(p);
    if (eplugin) {
      let target = plugin.settings.pluginDirExporter;
      if (!plugin.fsEditor.fs.existsSync(target)) {
        target = await nc.chain.tp_prompt("\u8F93\u51FA\u76EE\u5F55");
      }
      target = target.replace(/\\/g, "/");
      if (!target.endsWith("/" + p)) {
        target = target + "/" + p;
      }
      if (!plugin.fsEditor.fs.existsSync(target)) {
        plugin.fsEditor.fs.mkdirSync(target);
      }
      let items = ["main.js", "manifest.json", "styles.css", "data.json"];
      for (let item of items) {
        let src = `${plugin.fsEditor.root}/${eplugin.manifest.dir}/${item}`;
        let dst = `${target}/${item}`;
        plugin.fsEditor.copy_file_by_path(src, dst, "overwrite");
        new import_obsidian.Notice(`\u5BFC\u51FA\uFF1A${p}/${item}`, 3e3);
      }
    }
  }
});
var commandBuilders = [
  cmd_export_readme,
  cmd_set_git_project,
  cmd_export_plugin
];
function addCommands(plugin) {
  commandBuilders.forEach((c) => {
    plugin.addCommand(c(plugin));
  });
}
var VaultExpoterPlugin = class extends import_obsidian.Plugin {
  async onload() {
    await this.loadSettings();
    this.app.vt = this;
    this.fsEditor = new FsEditor(this);
    this.addSettingTab(new VExporterSettingTab(this.app, this));
    addCommands(this);
  }
  onunload() {
  }
  get notechain() {
    return this.app.plugins.getPlugin("note-chain");
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  async export_readme(tfile, dst, as_readme = true, assets = "assets") {
    let nc = this.app.plugins.getPlugin("note-chain");
    if (!tfile) {
      tfile = nc.chain.current_note;
    }
    if (!dst) {
      dst = this.settings.nameLocalGitProject;
    }
    if (!dst.contains("/")) {
      dst = nc.editor.get_frontmatter(tfile, dst);
    }
    if (!dst) {
      dst = await nc.chain.tp_prompt("Path of LocalGitProject");
      if (!dst) {
        return;
      }
    }
    dst = dst.replace(/\\/g, "/");
    if (!this.fsEditor.fs.existsSync(dst)) {
      console.log("No Dir:", dst);
    }
    console.log(dst);
    let olinks = nc.chain.get_outlinks(tfile);
    let tmp;
    if (as_readme) {
      tmp = dst + "/readMe.md";
    } else {
      tmp = dst + "/" + tfile.basename + ".md";
    }
    this.fsEditor.copy_tfile(tfile, tmp);
    await this.replace_readme(tmp);
    let adir = dst + "/" + assets;
    if (!this.fsEditor.fs.existsSync(adir)) {
      this.fsEditor.fs.mkdirSync(adir);
    }
    for (let f of olinks) {
      if (!(f.extension === "md")) {
        this.fsEditor.copy_tfile(f, adir + "/" + f.basename + "." + f.extension);
      }
    }
  }
  replace_readme(path) {
    const ufunc = (path2, data) => {
      let replacedContent = data.replace(
        /\!\[\[(.*?)\]\]/g,
        (match, filename) => {
          return `![${filename}](./assets/${filename})`;
        }
      );
      if (this.settings.readmeRemoveFrontmatter) {
        replacedContent = replacedContent.replace(
          /---[\n(\r\n)][\s\S]*?---[\n(\r\n)]/,
          ""
        );
      }
      return replacedContent;
    };
    this.fsEditor.modify(path, ufunc, "utf8");
  }
};
var VExporterSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  getSettingValue(field) {
    return this.plugin.settings[field];
  }
  add_toggle(name, desc, field) {
    const { containerEl } = this;
    let value = this.plugin.settings[field];
    let item = new import_obsidian.Setting(containerEl).setName(name).setDesc(desc).addToggle(
      (text) => text.setValue(value).onChange(async (value2) => {
        this.plugin.settings[field] = value2;
        await this.plugin.saveSettings();
      })
    );
    return item;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian.Setting(containerEl).setName("LocalGitProject").setDesc("Metadata Name for Dir of Git Porject").addText((text) => text.setPlaceholder("Enter your field").setValue(this.plugin.settings.nameLocalGitProject).onChange(async (value) => {
      this.plugin.settings.nameLocalGitProject = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Folder For Assets").setDesc("Dir Name for Assets").addText((text) => text.setValue(this.plugin.settings.assetsLocalGitProject).onChange(async (value) => {
      this.plugin.settings.assetsLocalGitProject = value;
      await this.plugin.saveSettings();
    }));
    this.add_toggle(
      "Remove Frontmatter?",
      "",
      "readmeRemoveFrontmatter"
    );
    new import_obsidian.Setting(containerEl).setName("Plugin Dir To Export").addText((text) => text.setValue(this.plugin.settings.pluginDirExporter).onChange(async (value) => {
      this.plugin.settings.pluginDirExporter = value;
      await this.plugin.saveSettings();
    }));
  }
};
//# sourceMappingURL=data:application/json;base64,

/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => VaultExpoterPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var fs = require("fs");
var DEFAULT_SETTINGS = {
  nameLocalGitProject: "LocalGitProject",
  assetsLocalGitProject: "assets"
};
var cmd_export_readme = (plugin) => ({
  id: "export_readme",
  name: "Export readMe",
  callback: async () => {
    let nc = await plugin.app.plugins.getPlugin("note-chain");
    let tfile = nc.chain.current_note;
    await plugin.export_readme(
      tfile,
      null,
      true,
      plugin.settings.assetsLocalGitProject
    );
  }
});
var cmd_set_git_project = (plugin) => ({
  id: "set_git_project",
  name: "Set Git Project",
  callback: async () => {
    let nc = await plugin.app.plugins.getPlugin("note-chain");
    let dir = await nc.chain.tp_prompt("\u8F93\u5165\u6587\u4EF6\u5939");
    if (!dir || !fs.existsSync(dir)) {
      return;
    }
    await nc.editor.set_frontmatter(
      nc.chain.current_note,
      plugin.settings.nameLocalGitProject,
      dir
    );
  }
});
var commandBuilders = [
  cmd_export_readme,
  cmd_set_git_project
];
function addCommands(plugin) {
  commandBuilders.forEach((c) => {
    plugin.addCommand(c(plugin));
  });
}
var VaultExpoterPlugin = class extends import_obsidian.Plugin {
  async onload() {
    await this.loadSettings();
    this.app.vt = this;
    this.fs = fs;
    this.root = this.app.vault.adapter.basePath;
    this.addSettingTab(new VExporterSettingTab(this.app, this));
    addCommands(this);
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  /**
  * 附件 src 到 dst，不在 vault 中，需要绝对路径
  * overwrite，复盖；mtime，新文件；
  */
  copy_file_by_path(src, dst, mode = "overwrite>mtime>pass") {
    mode = mode.split(">")[0];
    if (!fs.existsSync(src)) {
      return;
    }
    if (fs.existsSync(dst)) {
      if (mode === "overwrite") {
        fs.unlinkSync(dst);
        fs.copyFileSync(src, dst);
      } else if (mode === "mtime") {
        if (fs.statSync(dst).mtimeMs < fs.statSync(src).mtimeMs) {
          fs.unlinkSync(dst);
          fs.copyFileSync(src, dst);
        }
      }
    } else {
      fs.copyFileSync(src, dst);
    }
  }
  abspath(tfile) {
    if (tfile) {
      return this.root + "/" + tfile.path;
    } else {
      return null;
    }
  }
  copy_tfile(tfile, dst) {
    if (tfile) {
      let src = this.abspath(tfile);
      src && this.copy_file_by_path(src, dst);
    }
  }
  async export_readme(tfile, dst, as_readme = true, assets = "assets") {
    let nc = this.app.plugins.getPlugin("note-chain");
    if (!tfile) {
      tfile = nc.chain.current_note;
    }
    if (!dst) {
      dst = this.settings.nameLocalGitProject;
    }
    if (!dst.contains("/")) {
      dst = nc.editor.get_frontmatter(tfile, dst);
    }
    if (!dst) {
      dst = await nc.chain.tp_prompt("Path of LocalGitProject");
      if (!dst) {
        return;
      }
    }
    dst = dst.replace(/\\/g, "/");
    if (!fs.existsSync(dst)) {
      console.log("No Dir:", dst);
    }
    console.log(dst);
    let olinks = nc.chain.get_outlinks(tfile);
    let tmp;
    if (as_readme) {
      tmp = dst + "/readMe.md";
    } else {
      tmp = dst + "/" + tfile.basename + ".md";
    }
    this.copy_tfile(tfile, tmp);
    let adir = dst + "/" + assets;
    if (!fs.existsSync(adir)) {
      fs.mkdirSync(adir);
    }
    for (let f of olinks) {
      if (!(f.extension === "md")) {
        this.copy_tfile(f, adir + "/" + f.basename + "." + f.extension);
      }
    }
  }
};
var VExporterSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian.Setting(containerEl).setName("LocalGitProject").setDesc("Metadata Name for Dir of Git Porject").addText((text) => text.setPlaceholder("Enter your field").setValue(this.plugin.settings.nameLocalGitProject).onChange(async (value) => {
      this.plugin.settings.nameLocalGitProject = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Folder For Assets").setDesc("Dir Name for Assets").addText((text) => text.setValue(this.plugin.settings.assetsLocalGitProject).onChange(async (value) => {
      this.plugin.settings.assetsLocalGitProject = value;
      await this.plugin.saveSettings();
    }));
  }
};
//# sourceMappingURL=data:application/json;base64,

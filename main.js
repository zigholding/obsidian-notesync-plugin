/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => VaultExpoterPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian3 = require("obsidian");

// src/fseditor.ts
var import_obsidian = require("obsidian");
var FsEditor = class {
  constructor(plugin) {
    this.plugin = plugin;
    this.fs = require("fs");
    this.path = require("path");
  }
  get root() {
    let a = this.plugin.app.vault.adapter;
    return a.basePath.replace(/\\/g, "/");
  }
  get notechain() {
    let nc = this.plugin.app.plugins.getPlugin("note-chain");
    return nc;
  }
  abspath(tfile) {
    if (tfile) {
      return (this.root + "/" + tfile.path).replace(/\\/g, "/");
    } else {
      return null;
    }
  }
  isfile(path) {
    return this.fs.existsSync(path) && this.fs.statSync(path).isFile();
  }
  isdir(path) {
    return this.fs.existsSync(path) && this.fs.statSync(path).isDirectory();
  }
  list_dir(path, as_fullpath = true) {
    if (!this.isdir(path)) {
      return [];
    }
    let items = this.fs.readdirSync(path);
    if (as_fullpath) {
      items = items.map(
        (x) => {
          return path + "/" + x;
        }
      );
    }
    return items;
  }
  first_valid_dir(paths) {
    if (typeof paths == "string") {
      if (this.isdir(paths)) {
        return paths;
      } else {
        return null;
      }
    }
    for (let path of paths) {
      if (this.isdir(path)) {
        return path;
      }
    }
    return null;
  }
  async select_valid_dir(paths) {
    let xpaths = paths.filter((p) => this.isdir(p));
    if (xpaths.length === 0) {
      return null;
    } else if (xpaths.length == 1) {
      return xpaths[0];
    } else {
      let nc = this.plugin.app.plugins.getPlugin("note-chain");
      if (nc) {
        let path = await nc.chain.tp_suggester(xpaths, xpaths);
        return path;
      } else {
        return null;
      }
    }
  }
  mkdir_recursive(path) {
    if (this.isdir(path)) {
      return true;
    }
    let parent = this.path.dirname(path);
    if (!this.isdir(parent)) {
      this.mkdir_recursive(parent);
    }
    this.fs.mkdirSync(path);
  }
  /**
  * 附件 src 到 dst，不在 vault 中，需要绝对路径
  * overwrite，复盖；mtime，新文件；
  */
  copy_file(src, dst, mode = "pass>overwrite>mtime") {
    let fs = this.fs;
    mode = mode.split(">")[0];
    if (!fs.existsSync(src)) {
      return false;
    }
    if (fs.existsSync(dst)) {
      if (mode === "overwrite") {
        fs.unlinkSync(dst);
        fs.copyFileSync(src, dst);
        return true;
      } else if (mode === "mtime") {
        if (fs.statSync(dst).mtimeMs < fs.statSync(src).mtimeMs) {
          fs.unlinkSync(dst);
          fs.copyFileSync(src, dst);
          return true;
        }
      }
    } else {
      fs.copyFileSync(src, dst);
      return true;
    }
    return false;
  }
  copy_tfile(tfile, dst, mode = "mtime") {
    if (tfile) {
      let src = this.abspath(tfile);
      return src && this.copy_file(src, dst, mode);
    }
    return false;
  }
  mirror_tfile(tfile, vault_root, mode = "mtime", attachment = true, outlink = false) {
    if (tfile) {
      vault_root = vault_root.replace(/\\/g, "/");
      let src = this.root + "/" + tfile.path;
      let dst = vault_root + "/" + tfile.path;
      this.mkdir_recursive(this.path.dirname(dst));
      this.copy_file(src, dst, mode);
      if (attachment) {
        let nc = this.notechain;
        if (!nc) {
          return;
        }
        let tfiles = nc.chain.get_outlinks(tfile, false);
        for (let t of tfiles) {
          if (!(t.extension === "md")) {
            this.mirror_tfile(t, vault_root, mode, false);
          } else if (outlink) {
            this.mirror_tfile(t, vault_root, mode, false);
          }
        }
      }
    }
  }
  mirror_tfolder(tfolder, vault_root, mode = "mtime", attachment = true, outlink = false, strict = false) {
    if (tfolder) {
      for (let t of tfolder.children) {
        if (t instanceof import_obsidian.TFolder) {
          this.mirror_tfolder(t, vault_root, mode, attachment, outlink);
        } else if (t instanceof import_obsidian.TFile) {
          this.mirror_tfile(t, vault_root, mode, attachment, outlink);
        }
      }
      if (strict) {
        let dst = vault_root + "/" + tfolder.path;
        let src = this.abspath(tfolder);
        if (src && dst) {
          this.remove_files_not_in_src(src, dst);
        }
      }
    }
  }
  delete_file_or_dir(path) {
    if (this.isfile(path)) {
      this.fs.unlinkSync(path);
    } else if (this.isdir(path)) {
      let items = this.list_dir(path, true);
      for (let item of items) {
        this.delete_file_or_dir(item);
      }
      this.fs.rmdirSync(path);
    }
  }
  remove_files_not_in_src(src, dst) {
    if (!this.isdir(src) || !this.isdir(dst)) {
      return;
    }
    let items = this.list_dir(dst, false);
    for (let item of items) {
      let adst = dst + "/" + item;
      let asrc = src + "/" + item;
      if (this.isfile(adst)) {
        if (!this.isfile(asrc)) {
          this.fs.unlinkSync(adst);
        }
      } else if (this.isdir(adst)) {
        if (!this.isdir(asrc)) {
          this.delete_file_or_dir(adst);
        } else {
          this.remove_files_not_in_src(asrc, adst);
        }
      }
    }
  }
  mirror_folder(src, dst, mode = "mtime", strict = false) {
    if (!this.isdir(src)) {
      return;
    }
    this.mkdir_recursive(dst);
    if (!this.isdir(dst)) {
      return;
    }
    let items = this.list_dir(src, false);
    for (let item of items) {
      let asrc = this.path.join(src, item);
      let adst = this.path.join(dst, item);
      if (this.isfile(asrc)) {
        this.copy_file(asrc, adst, mode);
      } else if (this.isdir(asrc)) {
        this.mirror_folder(asrc, adst, mode, strict);
      }
    }
    if (strict) {
      this.remove_files_not_in_src(src, dst);
    }
  }
  modify(path, callback, encoding = "utf8") {
    let fs = this.fs;
    if (!fs.existsSync(path)) {
      return;
    }
    ;
    fs.readFile(
      path,
      encoding,
      (err, data) => {
        if (err) {
          console.error("Error reading file:", err);
        }
        let rs = callback(path, data);
        fs.writeFile(path, rs, encoding, (err2) => {
          if (err2) {
            console.error("Error writing file:", err2);
          } else {
            console.log("File content updated successfully.");
          }
        });
      }
    );
  }
};

// src/strings.ts
var Strings = class {
  constructor() {
    let lang = window.localStorage.getItem("language");
    if (lang) {
      this.language = lang;
    } else {
      this.language = "en";
    }
  }
  get cmd_export_current_note() {
    if (this.language == "zh") {
      return "\u5BFC\u51FA\u5F53\u524D\u7B14\u8BB0";
    } else {
      return "Export current note";
    }
  }
  get cmd_set_vexporter() {
    if (this.language == "zh") {
      return "\u8BBE\u7F6E\u5BFC\u51FA\u7B14\u8BB0\u9009\u9879";
    } else {
      return "Set config to export note";
    }
  }
  get cmd_export_plugin() {
    if (this.language == "zh") {
      return "\u5BFC\u51FA\u63D2\u4EF6";
    } else {
      return "Export plugin";
    }
  }
  get prompt_path_of_folder() {
    if (this.language == "zh") {
      return "\u8F93\u5165\u6587\u4EF6\u5939\u8DEF\u5F84";
    } else {
      return "Input path of folder";
    }
  }
  get notice_output() {
    if (this.language == "zh") {
      return "\u5BFC\u51FA\uFF1A";
    } else {
      return "Output:";
    }
  }
  get notice_nosuchdir() {
    if (this.language == "zh") {
      return "\u65E0\u6548\u76EE\u5F55";
    } else {
      return "Invaid path.";
    }
  }
  get setting_plugin_dir() {
    if (this.language == "zh") {
      return "\u63D2\u4EF6\u5BFC\u51FA\u76EE\u5F55";
    } else {
      return "Plugin dir to export";
    }
  }
  get setting_vault_dir() {
    if (this.language == "zh") {
      return "\u5E93\u76EE\u5F55";
    } else {
      return "Root dir of vault";
    }
  }
};
var strings = new Strings();

// src/setting.ts
var import_obsidian2 = require("obsidian");
var DEFAULT_SETTINGS = {
  pluginDirExporter: "",
  vaultDir: ""
};
var VExporterSettingTab = class extends import_obsidian2.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  getSettingValue(field) {
    return this.plugin.settings[field];
  }
  add_toggle(name, desc, field) {
    let { containerEl } = this;
    let value = this.plugin.settings[field];
    let item = new import_obsidian2.Setting(containerEl).setName(name).setDesc(desc).addToggle(
      (text) => text.setValue(value).onChange(async (value2) => {
        this.plugin.settings[field] = value2;
        await this.plugin.saveSettings();
      })
    );
    return item;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian2.Setting(containerEl).setName(this.plugin.strings.setting_plugin_dir).addTextArea((text) => text.setValue(this.plugin.settings.pluginDirExporter).onChange(async (value) => {
      this.plugin.settings.pluginDirExporter = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian2.Setting(containerEl).setName(this.plugin.strings.setting_vault_dir).addTextArea((text) => text.setValue(this.plugin.settings.vaultDir).onChange(async (value) => {
      this.plugin.settings.vaultDir = value;
      await this.plugin.saveSettings();
    }));
  }
};

// src/commands.ts
var cmd_export_current_note = (plugin) => ({
  id: "cmd_export_current_note",
  name: plugin.strings.cmd_export_current_note,
  callback: async () => {
    const nc = plugin.notechain;
    let tfile = nc.chain.current_note;
    await plugin.export_readme(tfile, null);
  }
});
var cmd_set_vexporter = (plugin) => ({
  id: "cmd_set_vexporter",
  name: plugin.strings.cmd_set_vexporter,
  callback: async () => {
    const nc = plugin.notechain;
    let dir = await nc.chain.tp_prompt(plugin.strings.prompt_path_of_folder);
    let item = {};
    if (plugin.fsEditor.fs.existsSync(dir)) {
      item["Dir"] = dir;
    }
    item["Name"] = "readMe";
    item["Assets"] = "./assets";
    item["RemoveMeta"] = true;
    item["UseGitLink"] = true;
    await nc.editor.set_frontmatter(
      nc.chain.current_note,
      "vexporter",
      item
    );
  }
});
var cmd_export_plugin = (plugin) => ({
  id: "cmd_export_plugin",
  name: plugin.strings.cmd_export_plugin,
  callback: async () => {
    const nc = plugin.notechain;
    let plugins = Object.keys(plugin.app.plugins.plugins);
    let p = await nc.chain.tp_suggester(plugins, plugins);
    let eplugin = plugin.app.plugins.getPlugin(p);
    if (eplugin) {
      let target = await plugin.fsEditor.select_valid_dir(
        plugin.settings.pluginDirExporter.split("\n")
      );
      if (!plugin.fsEditor.fs.existsSync(target)) {
        target = await nc.chain.tp_prompt(plugin.strings.prompt_path_of_folder);
      }
      target = target.replace(/\\/g, "/");
      if (!target.endsWith("/" + p)) {
        target = target + "/" + p;
      }
      if (!plugin.fsEditor.fs.existsSync(target)) {
        plugin.fsEditor.fs.mkdirSync(target);
      }
      let items = ["main.js", "manifest.json", "styles.css"];
      for (let item of items) {
        let src = `${plugin.fsEditor.root}/${eplugin.manifest.dir}/${item}`;
        let dst = `${target}/${item}`;
        plugin.fsEditor.copy_file(src, dst, "overwrite");
      }
    }
  }
});
var commandBuilders = [];
var commandBuildersDesktop = [
  cmd_export_current_note,
  cmd_set_vexporter,
  cmd_export_plugin
];
function addCommands(plugin) {
  commandBuilders.forEach((c) => {
    plugin.addCommand(c(plugin));
  });
  if (plugin.app.isMobile == false) {
    commandBuildersDesktop.forEach((c) => {
      plugin.addCommand(c(plugin));
    });
  }
}

// main.ts
var VaultExpoterPlugin = class extends import_obsidian3.Plugin {
  async onload() {
    if (this.app.workspace.layoutReady) {
      await this._onload_();
    } else {
      this.app.workspace.onLayoutReady(
        async () => {
          await this._onload_();
        }
      );
    }
  }
  async _onload_() {
    this.strings = new Strings();
    await this.loadSettings();
    this.fsEditor = new FsEditor(this);
    this.addSettingTab(new VExporterSettingTab(this.app, this));
    addCommands(this);
    this.registerEvent(
      this.app.workspace.on("file-menu", (menu, file) => {
        menu.addItem((item) => {
          item.setTitle("Mirror to other vault").setIcon("document").onClick(async () => {
            let dst = await this.fsEditor.select_valid_dir(
              this.settings.vaultDir.split("\n")
            );
            if (!dst) {
              let nc = this.app.plugins.getPlugin("note-chain");
              if (!nc) {
                new import_obsidian3.Notice("Plugin note-chain is needed!");
                return;
              }
              dst = await nc.chain.tp_prompt("Root of vault");
              if (!this.fsEditor.isdir(dst)) {
                new import_obsidian3.Notice("Invalid root: " + dst);
                return;
              }
            }
            if (file instanceof import_obsidian3.TFile) {
              this.fsEditor.mirror_tfile(file, dst, "mtime", true, false);
            } else if (file instanceof import_obsidian3.TFolder) {
              this.fsEditor.mirror_tfolder(file, dst, "mtime", true, false);
            }
          });
        });
      })
    );
  }
  onunload() {
  }
  get notechain() {
    return this.app.plugins.getPlugin("note-chain");
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  async export_readme(tfile, dst) {
    var _a, _b, _c, _d;
    let nc = this.app.plugins.getPlugin("note-chain");
    if (!tfile) {
      tfile = nc.chain.current_note;
    }
    if (!dst) {
      dst = (_a = nc.editor.get_frontmatter(tfile, "vexporter")) == null ? void 0 : _a.Dir;
      if (!dst) {
        dst = await nc.chain.tp_prompt("Path of LocalGitProject");
      }
    }
    if (!dst || !this.fsEditor.fs.existsSync(dst)) {
      new import_obsidian3.Notice(this.strings.notice_nosuchdir, 3e3);
      return;
    }
    dst = dst.replace(/\\/g, "/");
    let tmp;
    let name = (_b = nc.editor.get_frontmatter(tfile, "vexporter")) == null ? void 0 : _b.Name;
    if (name && !(name === "")) {
      tmp = dst + "/" + name + ".md";
    } else {
      tmp = dst + "/" + tfile.basename + ".md";
    }
    if (this.fsEditor.copy_tfile(tfile, tmp)) {
      if ((_c = nc.editor.get_frontmatter(tfile, "vexporter")) == null ? void 0 : _c.RemoveMeta) {
        const ufunc = (path, data) => {
          var _a2, _b2;
          let res = data;
          if ((_a2 = nc.editor.get_frontmatter(tfile, "vexporter")) == null ? void 0 : _a2.RemoveMeta) {
            res = res.replace(
              /---[\n(\r\n)][\s\S]*?---[\n(\r\n)]/,
              ""
            );
          }
          if (((_b2 = nc.editor.get_frontmatter(tfile, "vexporter")) == null ? void 0 : _b2.UseGitLink) && assets) {
            res = res.replace(
              /\!\[\[(.*?)\]\]/g,
              (match, name2) => {
                return `![${name2}](${assets}/${name2.replace(/ /g, "%20")})`;
              }
            );
          }
          return res;
        };
        await this.fsEditor.modify(tmp, ufunc);
      }
    }
    let assets = (_d = nc.editor.get_frontmatter(tfile, "vexporter")) == null ? void 0 : _d.Assets;
    if (assets) {
      let olinks = nc.chain.get_outlinks(tfile);
      let adir = dst + "/" + assets;
      this.fsEditor.mkdir_recursive(adir);
      for (let f of olinks) {
        if (!(f.extension === "md")) {
          this.fsEditor.copy_tfile(f, adir + "/" + f.basename + "." + f.extension);
        }
      }
    }
  }
};
//# sourceMappingURL=data:application/json;base64,
